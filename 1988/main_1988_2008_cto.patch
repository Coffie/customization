Submodule Loop c74ac93..9dda5a3:
diff --git a/Loop/Loop.xcodeproj/project.pbxproj b/Loop/Loop.xcodeproj/project.pbxproj
index 6180a602..fb968124 100644
--- a/Loop/Loop.xcodeproj/project.pbxproj
+++ b/Loop/Loop.xcodeproj/project.pbxproj
@@ -523,6 +523,10 @@
 		C1FB4290217922A100FAB378 /* PumpManagerUI.swift in Sources */ = {isa = PBXBuildFile; fileRef = C1FB428E217921D600FAB378 /* PumpManagerUI.swift */; };
 		DD3DBD272A33AEC8000F8B5B /* SettingsView+algorithmExperimentsSection.swift in Sources */ = {isa = PBXBuildFile; fileRef = DD3DBD262A33AEC8000F8B5B /* SettingsView+algorithmExperimentsSection.swift */; };
 		DD3DBD292A33AFE9000F8B5B /* IntegralRetrospectiveCorrectionSelectionView.swift in Sources */ = {isa = PBXBuildFile; fileRef = DD3DBD282A33AFE9000F8B5B /* IntegralRetrospectiveCorrectionSelectionView.swift */; };
+		DDC389F62A2B61750066E2E8 /* ApplicationFactorStrategy.swift in Sources */ = {isa = PBXBuildFile; fileRef = DDC389F52A2B61750066E2E8 /* ApplicationFactorStrategy.swift */; };
+		DDC389F82A2B620B0066E2E8 /* GlucoseBasedApplicationFactorStrategy.swift in Sources */ = {isa = PBXBuildFile; fileRef = DDC389F72A2B620B0066E2E8 /* GlucoseBasedApplicationFactorStrategy.swift */; };
+		DDC389FA2A2B62470066E2E8 /* ConstantDosingStrategy.swift in Sources */ = {isa = PBXBuildFile; fileRef = DDC389F92A2B62470066E2E8 /* ConstantDosingStrategy.swift */; };
+		DDC389FE2A2C4C830066E2E8 /* GlucoseBasedApplicationFactorSelectionView.swift in Sources */ = {isa = PBXBuildFile; fileRef = DDC389FD2A2C4C830066E2E8 /* GlucoseBasedApplicationFactorSelectionView.swift */; };
 		E90909D124E34AC500F963D2 /* high_and_rising_with_cob_momentum_effect.json in Resources */ = {isa = PBXBuildFile; fileRef = E90909CC24E34AC500F963D2 /* high_and_rising_with_cob_momentum_effect.json */; };
 		E90909D224E34AC500F963D2 /* high_and_rising_with_cob_insulin_effect.json in Resources */ = {isa = PBXBuildFile; fileRef = E90909CD24E34AC500F963D2 /* high_and_rising_with_cob_insulin_effect.json */; };
 		E90909D324E34AC500F963D2 /* high_and_rising_with_cob_predicted_glucose.json in Resources */ = {isa = PBXBuildFile; fileRef = E90909CE24E34AC500F963D2 /* high_and_rising_with_cob_predicted_glucose.json */; };
@@ -1695,6 +1699,10 @@
 		C1FF3D4D29C786A900BDC1EC /* he */ = {isa = PBXFileReference; lastKnownFileType = text.plist.strings; name = he; path = he.lproj/InfoPlist.strings; sourceTree = "<group>"; };
 		DD3DBD262A33AEC8000F8B5B /* SettingsView+algorithmExperimentsSection.swift */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.swift; path = "SettingsView+algorithmExperimentsSection.swift"; sourceTree = "<group>"; };
 		DD3DBD282A33AFE9000F8B5B /* IntegralRetrospectiveCorrectionSelectionView.swift */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.swift; path = IntegralRetrospectiveCorrectionSelectionView.swift; sourceTree = "<group>"; };
+		DDC389F52A2B61750066E2E8 /* ApplicationFactorStrategy.swift */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.swift; path = ApplicationFactorStrategy.swift; sourceTree = "<group>"; };
+		DDC389F72A2B620B0066E2E8 /* GlucoseBasedApplicationFactorStrategy.swift */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.swift; path = GlucoseBasedApplicationFactorStrategy.swift; sourceTree = "<group>"; };
+		DDC389F92A2B62470066E2E8 /* ConstantDosingStrategy.swift */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.swift; path = ConstantDosingStrategy.swift; sourceTree = "<group>"; };
+		DDC389FD2A2C4C830066E2E8 /* GlucoseBasedApplicationFactorSelectionView.swift */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.swift; path = GlucoseBasedApplicationFactorSelectionView.swift; sourceTree = "<group>"; };
 		E90909CC24E34AC500F963D2 /* high_and_rising_with_cob_momentum_effect.json */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = text.json; path = high_and_rising_with_cob_momentum_effect.json; sourceTree = "<group>"; };
 		E90909CD24E34AC500F963D2 /* high_and_rising_with_cob_insulin_effect.json */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = text.json; path = high_and_rising_with_cob_insulin_effect.json; sourceTree = "<group>"; };
 		E90909CE24E34AC500F963D2 /* high_and_rising_with_cob_predicted_glucose.json */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = text.json; path = high_and_rising_with_cob_predicted_glucose.json; sourceTree = "<group>"; };
@@ -2412,6 +2420,7 @@
 				4311FB9A1F37FE1B00D4C0A7 /* TitleSubtitleTextFieldTableViewCell.swift */,
 				C1AF062229426300002C1B19 /* ManualGlucoseEntryRow.swift */,
 				DD3DBD282A33AFE9000F8B5B /* IntegralRetrospectiveCorrectionSelectionView.swift */,
+				DDC389FD2A2C4C830066E2E8 /* GlucoseBasedApplicationFactorSelectionView.swift */,
 			);
 			path = Views;
 			sourceTree = "<group>";
@@ -2452,6 +2461,9 @@
 				E9B355232935906B0076AB04 /* Missed Meal Detection */,
 				C1F2075B26D6F9B0007AB7EB /* ProfileExpirationAlerter.swift */,
 				A96DAC2B2838F31200D94E38 /* SharedLogging.swift */,
+				DDC389F52A2B61750066E2E8 /* ApplicationFactorStrategy.swift */,
+				DDC389F72A2B620B0066E2E8 /* GlucoseBasedApplicationFactorStrategy.swift */,
+				DDC389F92A2B62470066E2E8 /* ConstantDosingStrategy.swift */,
 			);
 			path = Managers;
 			sourceTree = "<group>";
@@ -3838,6 +3850,7 @@
 				C1201E2C23ECDBD0002DA84A /* WatchContextRequestUserInfo.swift in Sources */,
 				1D49795824E7289700948F05 /* ServicesViewModel.swift in Sources */,
 				1D4A3E2D2478628500FD601B /* StoredAlert+CoreDataClass.swift in Sources */,
+				DDC389FA2A2B62470066E2E8 /* ConstantDosingStrategy.swift in Sources */,
 				892D7C5123B54A15008A9656 /* CarbEntryViewController.swift in Sources */,
 				B4E202302661063E009421B5 /* ClosedLoopStatus.swift in Sources */,
 				C191D2A125B3ACAA00C26C0B /* DosingStrategySelectionView.swift in Sources */,
@@ -3872,6 +3885,7 @@
 				1DB619AC270BAD3D006C9D07 /* VersionUpdateViewModel.swift in Sources */,
 				A9C62D882331703100535612 /* Service.swift in Sources */,
 				89CAB36324C8FE96009EE3CE /* PredictedGlucoseChartView.swift in Sources */,
+				DDC389F82A2B620B0066E2E8 /* GlucoseBasedApplicationFactorStrategy.swift in Sources */,
 				4F6663941E905FD2009E74FC /* ChartColorPalette+Loop.swift in Sources */,
 				A9F703732489BC8500C98AD8 /* CarbStore+SimulatedCoreData.swift in Sources */,
 				4328E0351CFC0AE100E199AA /* WatchDataManager.swift in Sources */,
@@ -3934,6 +3948,7 @@
 				A97F250825E056D500F0EE19 /* OnboardingManager.swift in Sources */,
 				438D42F91D7C88BC003244B0 /* PredictionInputEffect.swift in Sources */,
 				892A5D692230C41D008961AB /* RangeReplaceableCollection.swift in Sources */,
+				DDC389F62A2B61750066E2E8 /* ApplicationFactorStrategy.swift in Sources */,
 				4F70C2101DE8FAC5006380B7 /* ExtensionDataManager.swift in Sources */,
 				43DFB62320D4CAE7008A7BAE /* PumpManager.swift in Sources */,
 				A9FB75F1252BE320004C7D3F /* BolusDosingDecision.swift in Sources */,
@@ -3942,6 +3957,7 @@
 				431A8C401EC6E8AB00823B9C /* CircleMaskView.swift in Sources */,
 				1D05219D2469F1F5000EBBDE /* AlertStore.swift in Sources */,
 				439897371CD2F80600223065 /* AnalyticsServicesManager.swift in Sources */,
+				DDC389FE2A2C4C830066E2E8 /* GlucoseBasedApplicationFactorSelectionView.swift in Sources */,
 				A9C62D842331700E00535612 /* DiagnosticLog+Subsystem.swift in Sources */,
 				895FE0952201234000FCF18A /* OverrideSelectionViewController.swift in Sources */,
 				C1EF747228D6A44A00C8C083 /* CrashRecoveryManager.swift in Sources */,
diff --git a/Loop/Loop/Extensions/SettingsView+algorithmExperimentsSection.swift b/Loop/Loop/Extensions/SettingsView+algorithmExperimentsSection.swift
index 9510fc78..b094985d 100644
--- a/Loop/Loop/Extensions/SettingsView+algorithmExperimentsSection.swift
+++ b/Loop/Loop/Extensions/SettingsView+algorithmExperimentsSection.swift
@@ -5,6 +5,7 @@
 //  Created by Jonas Björkert on 2023-06-03.
 //  Copyright © 2023 LoopKit Authors. All rights reserved.
 //
+
 import Foundation
 import SwiftUI
 import LoopKitUI
@@ -12,7 +13,13 @@ import LoopKitUI
 extension SettingsView {
     internal var algorithmExperimentsSection: some View {
         Section(header: SectionHeader(label: NSLocalizedString("Algorithm Experiments ⚠️", comment: "The title of the Algorithm Experiments section in settings"))) {
-
+            NavigationLink(destination: GlucoseBasedApplicationFactorSelectionView(isGlucoseBasedApplicationFactorEnabled: $isGlucoseBasedApplicationFactorEnabled)) {
+                HStack {
+                    Text("Glucose Based Partial Application")
+                    Spacer()
+                    Text(isGlucoseBasedApplicationFactorEnabled ? "On" : "Off")
+                }
+            }
             NavigationLink(destination: IntegralRetrospectiveCorrectionSelectionView(isIntegralRetrospectiveCorrectionEnabled: $isIntegralRetrospectiveCorrectionEnabled)) {
                 HStack {
                     Text("Integral Retrospective Correction")
diff --git a/Loop/Loop/Managers/ApplicationFactorStrategy.swift b/Loop/Loop/Managers/ApplicationFactorStrategy.swift
new file mode 100644
index 00000000..bf67935c
--- /dev/null
+++ b/Loop/Loop/Managers/ApplicationFactorStrategy.swift
@@ -0,0 +1,20 @@
+//
+//  ApplicationFactorStrategy.swift
+//  Loop
+//
+//  Created by Jonas Björkert on 2023-06-03.
+//  Copyright © 2023 LoopKit Authors. All rights reserved.
+//
+
+import Foundation
+import HealthKit
+import LoopKit
+import LoopCore
+
+protocol ApplicationFactorStrategy {
+    func calculateDosingFactor(
+        for glucose: HKQuantity,
+        correctionRangeSchedule: GlucoseRangeSchedule,
+        settings: LoopSettings
+    ) -> Double
+}
diff --git a/Loop/Loop/Managers/ConstantDosingStrategy.swift b/Loop/Loop/Managers/ConstantDosingStrategy.swift
new file mode 100644
index 00000000..0e01cea3
--- /dev/null
+++ b/Loop/Loop/Managers/ConstantDosingStrategy.swift
@@ -0,0 +1,32 @@
+//
+//  ConstantDosingStrategy.swift
+//  Loop
+//
+//  Created by Jonas Björkert on 2023-06-03.
+//  Copyright © 2023 LoopKit Authors. All rights reserved.
+//
+
+import Foundation
+import HealthKit
+import LoopKit
+import LoopCore
+
+struct ConstantDosingStrategy: ApplicationFactorStrategy {
+    func calculateDosingFactor(
+        for glucose: HKQuantity,
+        correctionRangeSchedule: GlucoseRangeSchedule,
+        settings: LoopSettings
+    ) -> Double {
+        // Modify Bolus Application Factor for modified CustomTypeOne LoopPatches
+        //   only effective for ConstantDosingStrategy
+        var constantBolusApplicationFactor = LoopConstants.bolusPartialApplicationFactor
+        let alternatePAFEnabled = UserDefaults.standard.bool(forKey: "alternatePAFEnabled")
+        let alternatePAFSetting = UserDefaults.standard.double(forKey: "alternatePAFSetting")
+        if (alternatePAFEnabled && alternatePAFSetting != 0) {
+            constantBolusApplicationFactor = alternatePAFSetting
+        }
+
+        // The original strategy uses a constant dosing factor.
+        return constantBolusApplicationFactor
+    }
+}
diff --git a/Loop/Loop/Managers/GlucoseBasedApplicationFactorStrategy.swift b/Loop/Loop/Managers/GlucoseBasedApplicationFactorStrategy.swift
new file mode 100644
index 00000000..41caa3d7
--- /dev/null
+++ b/Loop/Loop/Managers/GlucoseBasedApplicationFactorStrategy.swift
@@ -0,0 +1,42 @@
+//
+//  GlucoseBasedApplicationFactorStrategy.swift
+//  Loop
+//
+//  Created by Jonas Björkert on 2023-06-03.
+//  Copyright © 2023 LoopKit Authors. All rights reserved.
+//
+
+import Foundation
+import HealthKit
+import LoopKit
+import LoopCore
+
+struct GlucoseBasedApplicationFactorStrategy: ApplicationFactorStrategy {
+    static let minPartialApplicationFactor = 0.20 // min fraction of correction when glucose > minGlucoseSlidingScale
+    static let maxPartialApplicationFactor = 0.80 // max fraction of correction when glucose > maxGlucoseSlidingScale
+    // set minGlucoseSlidingScale based on user setting for correction range
+    // use mg/dL for calculations
+    static let minGlucoseDeltaSlidingScale = 10.0 // mg/dL
+    static let maxGlucoseSlidingScale = 200.0 // mg/dL
+
+    func calculateDosingFactor(
+        for glucose: HKQuantity,
+        correctionRangeSchedule: GlucoseRangeSchedule,
+        settings: LoopSettings
+    ) -> Double {
+        // Calculate current glucose and lower bound target
+        let currentGlucose = glucose.doubleValue(for: .milligramsPerDeciliter)
+        let correctionRange = correctionRangeSchedule.quantityRange(at: Date())
+        let lowerBoundTarget = correctionRange.lowerBound.doubleValue(for: .milligramsPerDeciliter)
+
+        // Calculate minimum glucose sliding scale and scaling fraction
+        let minGlucoseSlidingScale = GlucoseBasedApplicationFactorStrategy.minGlucoseDeltaSlidingScale + lowerBoundTarget
+        let scalingFraction = (GlucoseBasedApplicationFactorStrategy.maxPartialApplicationFactor - GlucoseBasedApplicationFactorStrategy.minPartialApplicationFactor) / (GlucoseBasedApplicationFactorStrategy.maxGlucoseSlidingScale - minGlucoseSlidingScale)
+        let scalingGlucose = max(currentGlucose - minGlucoseSlidingScale, 0.0)
+
+        // Calculate effectiveBolusApplicationFactor
+        let effectiveBolusApplicationFactor = min(GlucoseBasedApplicationFactorStrategy.minPartialApplicationFactor + scalingGlucose * scalingFraction, GlucoseBasedApplicationFactorStrategy.maxPartialApplicationFactor)
+
+        return effectiveBolusApplicationFactor
+    }
+}
diff --git a/Loop/Loop/Managers/LoopDataManager.swift b/Loop/Loop/Managers/LoopDataManager.swift
index 2082be5a..fb2b7d02 100644
--- a/Loop/Loop/Managers/LoopDataManager.swift
+++ b/Loop/Loop/Managers/LoopDataManager.swift
@@ -1690,42 +1690,29 @@ extension LoopDataManager {
             let automaticDosingIOBLimit = maxBolus! * 2.0
             let iobHeadroom = automaticDosingIOBLimit - self.insulinOnBoard!.value

-            // Dynamic Application Factor and Strategy Switching
-
-            // Default to the LoopConstants value
-            var alternateApplicationFactor = LoopConstants.bolusPartialApplicationFactor;
-
-            let alternatePAFEnabled = UserDefaults.standard.bool(forKey: "alternatePAFEnabled")
-            let alternatePAFSetting = UserDefaults.standard.double(forKey: "alternatePAFSetting")
-
-            let dosingStrategyAutomationEnabled = UserDefaults.standard.bool(forKey: "dosingStrategyAutomationEnabled")
-            let dosingStrategyThreshold = UserDefaults.standard.double(forKey: "dosingStrategyThreshold")
-
-            if (alternatePAFEnabled && alternatePAFSetting != 0) {
-                alternateApplicationFactor = alternatePAFSetting
-            }
+            switch settings.automaticDosingStrategy {
+            case .automaticBolus:
+                let volumeRounder = { (_ units: Double) in
+                    return self.delegate?.roundBolusVolume(units: units) ?? units
+                }

-            var switcherIsAB = false;
+                // Create dosing strategy based on user setting
+                let applicationFactorStrategy: ApplicationFactorStrategy = UserDefaults.standard.bool(forKey: "applyExperimentalGlucoseBasedApplicationFactor")
+                    ? GlucoseBasedApplicationFactorStrategy()
+                    : ConstantDosingStrategy()

-            if (dosingStrategyAutomationEnabled && dosingStrategyThreshold != 0) {
-                if( glucose.quantity > HKQuantity(unit : settings.glucoseUnit ?? .milligramsPerDeciliter, doubleValue: dosingStrategyThreshold) && settings.automaticDosingStrategy == .automaticBolus){
-                     switcherIsAB = true;
-                 } else {
-                     switcherIsAB = false;
-                 }
-            } else if (settings.automaticDosingStrategy == .automaticBolus) {
-                switcherIsAB = true;
-            }
+                let correctionRangeSchedule = settings.effectiveGlucoseTargetRangeSchedule()

-            UserDefaults.standard.set(settings.glucoseUnit?.unitString ?? HKUnit.milligramsPerDeciliter.unitString, forKey: "settingsGlucoseUnit")
+                let effectiveBolusApplicationFactor = applicationFactorStrategy.calculateDosingFactor(
+                    for: glucose.quantity,
+                    correctionRangeSchedule: correctionRangeSchedule!,
+                    settings: settings
+                )

-            switch switcherIsAB {
-            case true:
-                let volumeRounder = { (_ units: Double) in
-                    return self.delegate?.roundBolusVolume(units: units) ?? units
-                }
+                self.logger.debug(" *** Glucose: %{public}@, effectiveBolusApplicationFactor: %.2f", glucose.quantity.description, effectiveBolusApplicationFactor)

-                let maxAutomaticBolus = min(iobHeadroom, maxBolus! * alternateApplicationFactor)
+                // If a user customizes maxPartialApplicationFactor > 1; this respects maxBolus
+                let maxAutomaticBolus = min(iobHeadroom, maxBolus! * min(effectiveBolusApplicationFactor, 1.0))

                 dosingRecommendation = predictedGlucose.recommendedAutomaticDose(
                     to: glucoseTargetRange!,
@@ -1735,13 +1722,13 @@ extension LoopDataManager {
                     model: doseStore.insulinModelProvider.model(for: pumpInsulinType),
                     basalRates: basalRateSchedule!,
                     maxAutomaticBolus: maxAutomaticBolus,
-                    partialApplicationFactor: alternateApplicationFactor * self.timeBasedDoseApplicationFactor,
+                    partialApplicationFactor: effectiveBolusApplicationFactor * self.timeBasedDoseApplicationFactor,
                     lastTempBasal: lastTempBasal,
                     volumeRounder: volumeRounder,
                     rateRounder: rateRounder,
                     isBasalRateScheduleOverrideActive: settings.scheduleOverride?.isBasalRateScheduleOverriden(at: startDate) == true
                 )
-            case false:
+            case .tempBasalOnly:

                 let temp = predictedGlucose.recommendedTempBasal(
                     to: glucoseTargetRange!,
@@ -2157,6 +2144,7 @@ extension LoopDataManager {
                 "insulinOnBoard: \(String(describing: manager.insulinOnBoard))",
                 "error: \(String(describing: state.error))",
                 "overrideInUserDefaults: \(String(describing: UserDefaults.appGroup?.intentExtensionOverrideToSet))",
+                "applyExperimentalGlucoseBasedApplicationFactor: \(UserDefaults.standard.bool(forKey: "applyExperimentalGlucoseBasedApplicationFactor"))",
                 "",
                 String(reflecting: self.retrospectiveCorrection),
                 "",
diff --git a/Loop/Loop/Views/GlucoseBasedApplicationFactorSelectionView.swift b/Loop/Loop/Views/GlucoseBasedApplicationFactorSelectionView.swift
new file mode 100644
index 00000000..1e78c81e
--- /dev/null
+++ b/Loop/Loop/Views/GlucoseBasedApplicationFactorSelectionView.swift
@@ -0,0 +1,55 @@
+//
+//  GlucoseBasedApplicationFactorSelectionView.swift
+//  Loop
+//
+//  Created by Jonas Björkert on 2023-06-04.
+//  Copyright © 2023 LoopKit Authors. All rights reserved.
+//
+
+import Foundation
+import SwiftUI
+import LoopKit
+import LoopKitUI
+
+public struct GlucoseBasedApplicationFactorSelectionView: View {
+    @Binding var isGlucoseBasedApplicationFactorEnabled: Bool
+
+    public init(isGlucoseBasedApplicationFactorEnabled: Binding<Bool>) {
+        self._isGlucoseBasedApplicationFactorEnabled = isGlucoseBasedApplicationFactorEnabled
+    }
+
+    public var body: some View {
+        List {
+            automaticBolusSection
+        }
+        .navigationBarTitleDisplayMode(.inline)
+        .toolbar {
+            ToolbarItem(placement: .principal) {
+                VStack {
+                    Text("Glucose Based")
+                        .font(.headline)
+                    Text("Partial Application")
+                        .font(.subheadline)
+                }
+            }
+        }
+    }
+
+    private var automaticBolusSection: some View {
+        VStack {
+            DescriptiveText(label: NSLocalizedString("Active only when Automatic Bolus is selected under Dosing Strategy.\n\nWhen Glucose Based Partial Application is disabled, Automatic Bolus Dosing Strategy uses a constant percentage of 40% when Loop recommends a bolus.\n\nWhen enabled, this experimental feature varies the percentage of recommended bolus delivered each cycle with glucose level. Near correction range, use 20% (similar to Temp Basal). Gradually increase to a maximum of 80% at high glucose (200 mg/dL, 11.1 mmol/L).\n\nPlease be aware that during fast rising glucose, such as after an unannounced meal, this feature, combined with Loop's velocity and retrospective correction effects, may result in a larger dose than your ISF would call for.", comment: "Description of Glucose Based Partial Application toggle."), color: .black)
+            Section() {
+                Toggle(NSLocalizedString("Glucose Based Partial Application", comment: "Title for Glucose Based Partial Application toggle"), isOn: $isGlucoseBasedApplicationFactorEnabled)
+                    .onChange(of: isGlucoseBasedApplicationFactorEnabled) { newValue in
+                        UserDefaults.standard.set(newValue, forKey: "applyExperimentalGlucoseBasedApplicationFactor")
+                    }
+            }
+        }
+    }
+}
+
+struct GlucoseBasedApplicationFactorSelectionView_Previews: PreviewProvider {
+    static var previews: some View {
+        GlucoseBasedApplicationFactorSelectionView(isGlucoseBasedApplicationFactorEnabled: .constant(true))
+    }
+}
diff --git a/Loop/Loop/Views/SettingsView.swift b/Loop/Loop/Views/SettingsView.swift
index 638dfc4a..a9403b88 100644
--- a/Loop/Loop/Views/SettingsView.swift
+++ b/Loop/Loop/Views/SettingsView.swift
@@ -31,6 +31,7 @@ public struct SettingsView: View {
     @State private var deletePumpDataAlertIsPresented = false
     @State private var deleteCGMDataAlertIsPresented = false
     @State internal var isIntegralRetrospectiveCorrectionEnabled = UserDefaults.standard.bool(forKey: "isExperimentalIntegralRetrospectiveCorrectionEnabled")
+    @State internal var isGlucoseBasedApplicationFactorEnabled = UserDefaults.standard.bool(forKey: "applyExperimentalGlucoseBasedApplicationFactor")

     public init(viewModel: SettingsViewModel) {
         self.viewModel = viewModel
diff --git a/Loop/Settings.bundle/Root.plist b/Loop/Settings.bundle/Root.plist
index a176bd16..0df628c0 100644
--- a/Loop/Settings.bundle/Root.plist
+++ b/Loop/Settings.bundle/Root.plist
@@ -10,27 +10,13 @@
 			<key>Type</key>
 			<string>PSGroupSpecifier</string>
 			<key>Title</key>
-			<string>Add Now Marker, Main Charts</string>
-		</dict>
-		<dict>
-			<key>Type</key>
-			<string>PSToggleSwitchSpecifier</string>
-			<key>Title</key>
-			<string>Enabled</string>
-			<key>Key</key>
-			<string>addNowMarkerToCharts</string>
-			<key>DefaultValue</key>
-			<false/>
-			<key>TrueValue</key>
-			<true/>
-			<key>FalseValue</key>
-			<false/>
+			<string>SWITCHER PATCH REPLACED - USE GLUCOSE BASED PARTIAL APPLICATION IN LOOP, SETTINGS</string>
 		</dict>
 		<dict>
 			<key>Type</key>
 			<string>PSGroupSpecifier</string>
 			<key>Title</key>
-			<string>Automatic Strategy Switching</string>
+			<string>Add Now Marker, Main Charts</string>
 		</dict>
 		<dict>
 			<key>Type</key>
@@ -38,7 +24,7 @@
 			<key>Title</key>
 			<string>Enabled</string>
 			<key>Key</key>
-			<string>dosingStrategyAutomationEnabled</string>
+			<string>addNowMarkerToCharts</string>
 			<key>DefaultValue</key>
 			<false/>
 			<key>TrueValue</key>
@@ -46,16 +32,6 @@
 			<key>FalseValue</key>
 			<false/>
 		</dict>
-		<dict>
-			<key>Type</key>
-			<string>PSTextFieldSpecifier</string>
-			<key>Title</key>
-			<string>Switching BG Threshold</string>
-			<key>Key</key>
-			<string>dosingStrategyThreshold</string>
-			<key>KeyboardType</key>
-			<string>NumbersAndPunctuation</string>
-		</dict>
 		<dict>
 			<key>Type</key>
 			<string>PSGroupSpecifier</string>
@@ -73,8 +49,6 @@
 			<string>1.0</string>
 			<key>Values</key>
 			<array>
-				<real>0.05</real>
-				<real>0.1</real>
 				<real>0.15</real>
 				<real>0.2</real>
 				<real>0.25</real>
@@ -96,8 +70,6 @@
 			</array>
 			<key>Titles</key>
 			<array>
-				<string>5%</string>
-				<string>10%</string>
 				<string>15%</string>
 				<string>20%</string>
 				<string>25%</string>
@@ -122,7 +94,7 @@
 			<key>Type</key>
 			<string>PSGroupSpecifier</string>
 			<key>Title</key>
-			<string>Partial Bolus Application Factor</string>
+			<string>VALID ONLY WHEN GLUCOSE BASED PARTIAL APPLICATION NOT ENABLED - CONSTANT PARTIAL APPLICATION</string>
 		</dict>
 		<dict>
 			<key>Type</key>
@@ -149,8 +121,6 @@
 			<string>0.4</string>
 			<key>Values</key>
 			<array>
-				<real>0.05</real>
-				<real>0.1</real>
 				<real>0.15</real>
 				<real>0.2</real>
 				<real>0.25</real>
@@ -172,8 +142,6 @@
 			</array>
 			<key>Titles</key>
 			<array>
-				<string>5%</string>
-				<string>10%</string>
 				<string>15%</string>
 				<string>20%</string>
 				<string>25%</string>
