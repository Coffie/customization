Submodule Loop contains modified content
diff --git a/Loop/Loop/Managers/ProfileExpirationAlerter.swift b/Loop/Loop/Managers/ProfileExpirationAlerter.swift
index 3aa74273..fb33b1cb 100644
--- a/Loop/Loop/Managers/ProfileExpirationAlerter.swift
+++ b/Loop/Loop/Managers/ProfileExpirationAlerter.swift
@@ -15,16 +15,20 @@ class ProfileExpirationAlerter {
     
     static let expirationAlertWindow: TimeInterval = .days(20)
     static let settingsPageExpirationWarningModeWindow: TimeInterval = .days(3)
-
+    
     static func alertIfNeeded(viewControllerToPresentFrom: UIViewController) {
         
         let now = Date()
         
-        guard let profileExpiration = BuildDetails.default.profileExpiration, now > profileExpiration - expirationAlertWindow else {
+        guard let profileExpiration = BuildDetails.default.profileExpiration else {
             return
         }
         
-        let timeUntilExpiration = profileExpiration.timeIntervalSince(now)
+        let expirationDate = calculateExpirationDate(profileExpiration: profileExpiration)
+        let timeUntilExpiration = expirationDate.timeIntervalSince(now)
+        if timeUntilExpiration > expirationAlertWindow {
+            return
+        }
         
         let minimumTimeBetweenAlerts: TimeInterval = timeUntilExpiration > .hours(24) ? .days(2) : .hours(1)
         
@@ -43,31 +47,48 @@ class ProfileExpirationAlerter {
         
         let alertMessage = createVerboseAlertMessage(timeUntilExpirationStr: timeUntilExpirationStr!)
         
-        let dialog = UIAlertController(
-            title: NSLocalizedString("Profile Expires Soon", comment: "The title for notification of upcoming profile expiration"),
-            message: alertMessage,
-            preferredStyle: .alert)
-        dialog.addAction(UIAlertAction(title: NSLocalizedString("OK", comment: "Text for ok action on notification of upcoming profile expiration"), style: .default, handler: nil))
-        dialog.addAction(UIAlertAction(title: NSLocalizedString("More Info", comment: "Text for more info action on notification of upcoming profile expiration"), style: .default, handler: { (_) in
-            UIApplication.shared.open(URL(string: "https://loopkit.github.io/loopdocs/build/updating/")!)
-        }))
+        var dialog: UIAlertController
+        if isTestFlightBuild() {
+            dialog = UIAlertController(
+                title: NSLocalizedString("TestFlight Expires Soon", comment: "The title for notification of upcoming TestFlight expiration"),
+                message: alertMessage,
+                preferredStyle: .alert)
+            dialog.addAction(UIAlertAction(title: NSLocalizedString("OK", comment: "Text for ok action on notification of upcoming TestFlight expiration"), style: .default, handler: nil))
+            dialog.addAction(UIAlertAction(title: NSLocalizedString("More Info", comment: "Text for more info action on notification of upcoming TestFlight expiration"), style: .default, handler: { (_) in
+                UIApplication.shared.open(URL(string: "https://loopkit.github.io/loopdocs/gh-actions/gh-update/")!)
+            }))
+            
+        } else {
+            dialog = UIAlertController(
+                title: NSLocalizedString("Profile Expires Soon", comment: "The title for notification of upcoming profile expiration"),
+                message: alertMessage,
+                preferredStyle: .alert)
+            dialog.addAction(UIAlertAction(title: NSLocalizedString("OK", comment: "Text for ok action on notification of upcoming profile expiration"), style: .default, handler: nil))
+            dialog.addAction(UIAlertAction(title: NSLocalizedString("More Info", comment: "Text for more info action on notification of upcoming profile expiration"), style: .default, handler: { (_) in
+                UIApplication.shared.open(URL(string: "https://loopkit.github.io/loopdocs/build/updating/")!)
+            }))
+        }
         viewControllerToPresentFrom.present(dialog, animated: true, completion: nil)
         
         UserDefaults.appGroup?.lastProfileExpirationAlertDate = now
     }
     
     static func createVerboseAlertMessage(timeUntilExpirationStr:String) -> String {
-        return String(format: NSLocalizedString("%1$@ will stop working in %2$@. You will need to update before that, with a new provisioning profile.", comment: "Format string for body for notification of upcoming provisioning profile expiration. (1: app name) (2: amount of time until expiration"), Bundle.main.bundleDisplayName, timeUntilExpirationStr)
+        if isTestFlightBuild() {
+            return String(format: NSLocalizedString("%1$@ will stop working in %2$@. You will need to rebuild before that.", comment: "Format string for body for notification of upcoming expiration. (1: app name) (2: amount of time until expiration"), Bundle.main.bundleDisplayName, timeUntilExpirationStr)
+        } else {
+            return String(format: NSLocalizedString("%1$@ will stop working in %2$@. You will need to update before that, with a new provisioning profile.", comment: "Format string for body for notification of upcoming provisioning profile expiration. (1: app name) (2: amount of time until expiration"), Bundle.main.bundleDisplayName, timeUntilExpirationStr)
+        }
     }
     
-    static func isNearProfileExpiration(profileExpiration:Date) -> Bool {
-        return profileExpiration.timeIntervalSinceNow < settingsPageExpirationWarningModeWindow
+    static func isNearExpiration(expirationDate:Date) -> Bool {
+        return expirationDate.timeIntervalSinceNow < settingsPageExpirationWarningModeWindow
     }
     
-    static func createProfileExpirationSettingsMessage(profileExpiration:Date) -> String {
-        let nearExpiration = isNearProfileExpiration(profileExpiration: profileExpiration)
+    static func createProfileExpirationSettingsMessage(expirationDate:Date) -> String {
+        let nearExpiration = isNearExpiration(expirationDate: expirationDate)
         let maxUnitCount = nearExpiration ? 2 : 1 // only include hours in the msg if near expiration
-        let readableRelativeTime: String? = relativeTimeFormatter(maxUnitCount: maxUnitCount).string(from: profileExpiration.timeIntervalSinceNow)
+        let readableRelativeTime: String? = relativeTimeFormatter(maxUnitCount: maxUnitCount).string(from: expirationDate.timeIntervalSinceNow)
         let relativeTimeRemaining: String = readableRelativeTime ?? NSLocalizedString("Unknown time", comment: "Unknown amount of time in settings' profile expiration section")
         let verboseMessage = createVerboseAlertMessage(timeUntilExpirationStr: relativeTimeRemaining)
         let conciseMessage = relativeTimeRemaining + NSLocalizedString(" remaining", comment: "remaining time in setting's profile expiration section")
@@ -81,6 +102,57 @@ class ProfileExpirationAlerter {
         formatter.unitsStyle = .full
         formatter.zeroFormattingBehavior = .dropLeading
         formatter.maximumUnitCount = maxUnitCount
-        return formatter;
+        return formatter
+    }
+    
+    static func buildDate() -> Date? {
+        let dateFormatter = DateFormatter()
+        dateFormatter.dateFormat = "EEE MMM d HH:mm:ss 'UTC' yyyy"
+        dateFormatter.locale = Locale(identifier: "en_US_POSIX") // Set locale to ensure parsing works
+        dateFormatter.timeZone = TimeZone(identifier: "UTC")
+        
+        guard let dateString = BuildDetails.default.buildDateString,
+              let date = dateFormatter.date(from: dateString) else {
+            return nil
+        }
+        
+        return date
+    }
+    
+    static func isTestFlightBuild() -> Bool {
+        // If the target environment is a simulator, then
+        // this is not a TestFlight distribution. Return false.
+#if targetEnvironment(simulator)
+        return false
+#else
+        
+        // If an "embedded.mobileprovision" is present in the main bundle, then
+        // this is an Xcode, Ad-Hoc, or Enterprise distribution. Return false.
+        if Bundle.main.url(forResource: "embedded", withExtension: "mobileprovision") != nil {
+            return false
+        }
+        
+        // If an app store receipt is not present in the main bundle, then we cannot
+        // say whether this is a TestFlight or App Store distribution. Return false.
+        guard let receiptName = Bundle.main.appStoreReceiptURL?.lastPathComponent else {
+            return false
+        }
+        
+        // A TestFlight distribution presents a "sandboxReceipt", while an App Store
+        // distribution presents a "receipt". Return true if we have a TestFlight receipt.
+        return "sandboxReceipt".caseInsensitiveCompare(receiptName) == .orderedSame
+#endif
+    }
+    
+    static func calculateExpirationDate(profileExpiration: Date) -> Date {
+        let isTestFlight = isTestFlightBuild()
+        
+        if isTestFlight, let buildDate = buildDate() {
+            let testflightExpiration = Calendar.current.date(byAdding: .day, value: 90, to: buildDate)!
+            
+            return testflightExpiration
+        } else {
+            return profileExpiration
+        }
     }
 }
diff --git a/Loop/Loop/Views/SettingsView.swift b/Loop/Loop/Views/SettingsView.swift
index 8fca5668..a0b131ef 100644
--- a/Loop/Loop/Views/SettingsView.swift
+++ b/Loop/Loop/Views/SettingsView.swift
@@ -343,23 +343,49 @@ extension SettingsView {
      DIY loop specific component to show users the amount of time remaining on their build before a rebuild is necessary.
      */
     private func profileExpirationSection(profileExpiration:Date) -> some View {
-        let nearExpiration : Bool = ProfileExpirationAlerter.isNearProfileExpiration(profileExpiration: profileExpiration)
-        let profileExpirationMsg = ProfileExpirationAlerter.createProfileExpirationSettingsMessage(profileExpiration: profileExpiration)
-        let readableExpirationTime = Self.dateFormatter.string(from: profileExpiration)
+        let expirationDate = ProfileExpirationAlerter.calculateExpirationDate(profileExpiration: profileExpiration)
+        let isTestFlight = ProfileExpirationAlerter.isTestFlightBuild()
+        let nearExpiration = ProfileExpirationAlerter.isNearExpiration(expirationDate: expirationDate)
+        let profileExpirationMsg = ProfileExpirationAlerter.createProfileExpirationSettingsMessage(expirationDate: expirationDate)
+        let readableExpirationTime = Self.dateFormatter.string(from: expirationDate)
         
-        return Section(header: SectionHeader(label: NSLocalizedString("App Profile", comment: "Settings app profile section")),
-                       footer: Text(NSLocalizedString("Profile expires ", comment: "Time that profile expires") + readableExpirationTime)) {
-            if(nearExpiration) {
-                Text(profileExpirationMsg).foregroundColor(.red)
+        if isTestFlight {
+            return createAppExpirationSection(
+                headerLabel: NSLocalizedString("TestFlight", comment: "Settings app TestFlight section"),
+                footerLabel: NSLocalizedString("TestFlight expires ", comment: "Time that build expires") + readableExpirationTime,
+                expirationLabel: NSLocalizedString("TestFlight Expiration", comment: "Settings TestFlight expiration view"),
+                updateURL: "https://loopkit.github.io/loopdocs/gh-actions/gh-update/",
+                nearExpiration: nearExpiration,
+                expirationMessage: profileExpirationMsg
+            )
+        } else {
+            return createAppExpirationSection(
+                headerLabel: NSLocalizedString("App Profile", comment: "Settings app profile section"),
+                footerLabel: NSLocalizedString("Profile expires ", comment: "Time that profile expires") + readableExpirationTime,
+                expirationLabel: NSLocalizedString("Profile Expiration", comment: "Settings App Profile expiration view"),
+                updateURL: "https://loopkit.github.io/loopdocs/build/updating/",
+                nearExpiration: nearExpiration,
+                expirationMessage: profileExpirationMsg
+            )
+        }
+    }
+
+    private func createAppExpirationSection(headerLabel: String, footerLabel: String, expirationLabel: String, updateURL: String, nearExpiration: Bool, expirationMessage: String) -> some View {
+        return Section(
+            header: SectionHeader(label: headerLabel),
+            footer: Text(footerLabel)
+        ) {
+            if nearExpiration {
+                Text(expirationMessage).foregroundColor(.red)
             } else {
                 HStack {
-                    Text("Profile Expiration", comment: "Settings App Profile expiration view")
+                    Text(expirationLabel)
                     Spacer()
-                    Text(profileExpirationMsg).foregroundColor(Color.secondary)
+                    Text(expirationMessage).foregroundColor(Color.secondary)
                 }
             }
             Button(action: {
-                UIApplication.shared.open(URL(string: "https://loopkit.github.io/loopdocs/build/updating/")!)
+                UIApplication.shared.open(URL(string: updateURL)!)
             }) {
                 Text(NSLocalizedString("How to update (LoopDocs)", comment: "The title text for how to update"))
             }
