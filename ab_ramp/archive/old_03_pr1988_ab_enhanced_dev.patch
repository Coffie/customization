Submodule Loop contains modified content
diff --git a/Loop/Loop.xcodeproj/project.pbxproj b/Loop/Loop.xcodeproj/project.pbxproj
index 360db94c..31325017 100644
--- a/Loop/Loop.xcodeproj/project.pbxproj
+++ b/Loop/Loop.xcodeproj/project.pbxproj
@@ -516,6 +516,10 @@
 		C1FB428D21791D2500FAB378 /* PumpManager.swift in Sources */ = {isa = PBXBuildFile; fileRef = 43C3B6F620BBCAA30026CAFA /* PumpManager.swift */; };
 		C1FB428F217921D600FAB378 /* PumpManagerUI.swift in Sources */ = {isa = PBXBuildFile; fileRef = C1FB428E217921D600FAB378 /* PumpManagerUI.swift */; };
 		C1FB4290217922A100FAB378 /* PumpManagerUI.swift in Sources */ = {isa = PBXBuildFile; fileRef = C1FB428E217921D600FAB378 /* PumpManagerUI.swift */; };
+		DDC389F42A2B05280066E2E8 /* SettingsViewModel+ApplyLinearRamp.swift in Sources */ = {isa = PBXBuildFile; fileRef = DDC389F32A2B05280066E2E8 /* SettingsViewModel+ApplyLinearRamp.swift */; };
+		DDC389F62A2B61750066E2E8 /* DosingStrategy.swift in Sources */ = {isa = PBXBuildFile; fileRef = DDC389F52A2B61750066E2E8 /* DosingStrategy.swift */; };
+		DDC389F82A2B620B0066E2E8 /* LinearRampDosingStrategy.swift in Sources */ = {isa = PBXBuildFile; fileRef = DDC389F72A2B620B0066E2E8 /* LinearRampDosingStrategy.swift */; };
+		DDC389FA2A2B62470066E2E8 /* OriginalDosingStrategy.swift in Sources */ = {isa = PBXBuildFile; fileRef = DDC389F92A2B62470066E2E8 /* OriginalDosingStrategy.swift */; };
 		E90909D124E34AC500F963D2 /* high_and_rising_with_cob_momentum_effect.json in Resources */ = {isa = PBXBuildFile; fileRef = E90909CC24E34AC500F963D2 /* high_and_rising_with_cob_momentum_effect.json */; };
 		E90909D224E34AC500F963D2 /* high_and_rising_with_cob_insulin_effect.json in Resources */ = {isa = PBXBuildFile; fileRef = E90909CD24E34AC500F963D2 /* high_and_rising_with_cob_insulin_effect.json */; };
 		E90909D324E34AC500F963D2 /* high_and_rising_with_cob_predicted_glucose.json in Resources */ = {isa = PBXBuildFile; fileRef = E90909CE24E34AC500F963D2 /* high_and_rising_with_cob_predicted_glucose.json */; };
@@ -1683,6 +1687,10 @@
 		C1FF3D4B29C786A900BDC1EC /* he */ = {isa = PBXFileReference; lastKnownFileType = text.plist.strings; name = he; path = he.lproj/Localizable.strings; sourceTree = "<group>"; };
 		C1FF3D4C29C786A900BDC1EC /* he */ = {isa = PBXFileReference; lastKnownFileType = text.plist.strings; name = he; path = he.lproj/Localizable.strings; sourceTree = "<group>"; };
 		C1FF3D4D29C786A900BDC1EC /* he */ = {isa = PBXFileReference; lastKnownFileType = text.plist.strings; name = he; path = he.lproj/InfoPlist.strings; sourceTree = "<group>"; };
+		DDC389F32A2B05280066E2E8 /* SettingsViewModel+ApplyLinearRamp.swift */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.swift; path = "SettingsViewModel+ApplyLinearRamp.swift"; sourceTree = "<group>"; };
+		DDC389F52A2B61750066E2E8 /* DosingStrategy.swift */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.swift; path = DosingStrategy.swift; sourceTree = "<group>"; };
+		DDC389F72A2B620B0066E2E8 /* LinearRampDosingStrategy.swift */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.swift; path = LinearRampDosingStrategy.swift; sourceTree = "<group>"; };
+		DDC389F92A2B62470066E2E8 /* OriginalDosingStrategy.swift */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.swift; path = OriginalDosingStrategy.swift; sourceTree = "<group>"; };
 		E90909CC24E34AC500F963D2 /* high_and_rising_with_cob_momentum_effect.json */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = text.json; path = high_and_rising_with_cob_momentum_effect.json; sourceTree = "<group>"; };
 		E90909CD24E34AC500F963D2 /* high_and_rising_with_cob_insulin_effect.json */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = text.json; path = high_and_rising_with_cob_insulin_effect.json; sourceTree = "<group>"; };
 		E90909CE24E34AC500F963D2 /* high_and_rising_with_cob_predicted_glucose.json */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = text.json; path = high_and_rising_with_cob_predicted_glucose.json; sourceTree = "<group>"; };
@@ -2436,6 +2444,9 @@
 				C1F2075B26D6F9B0007AB7EB /* ProfileExpirationAlerter.swift */,
 				A96DAC2B2838F31200D94E38 /* SharedLogging.swift */,
 				7E69CFFB2A16A77E00203CBD /* ResetLoopManager.swift */,
+				DDC389F52A2B61750066E2E8 /* DosingStrategy.swift */,
+				DDC389F72A2B620B0066E2E8 /* LinearRampDosingStrategy.swift */,
+				DDC389F92A2B62470066E2E8 /* OriginalDosingStrategy.swift */,
 			);
 			path = Managers;
 			sourceTree = "<group>";
@@ -2716,6 +2727,7 @@
 				1D49795724E7289700948F05 /* ServicesViewModel.swift */,
 				C174233B259BEB0F00399C9D /* ManualEntryDoseViewModel.swift */,
 				1DB619AB270BAD3D006C9D07 /* VersionUpdateViewModel.swift */,
+				DDC389F32A2B05280066E2E8 /* SettingsViewModel+ApplyLinearRamp.swift */,
 			);
 			path = "View Models";
 			sourceTree = "<group>";
@@ -3825,6 +3837,7 @@
 				43A51E1F1EB6D62A000736CC /* CarbAbsorptionViewController.swift in Sources */,
 				43776F901B8022E90074EA36 /* AppDelegate.swift in Sources */,
 				4372E48B213CB5F00068E043 /* Double.swift in Sources */,
+				DDC389F42A2B05280066E2E8 /* SettingsViewModel+ApplyLinearRamp.swift in Sources */,
 				430B29932041F5B300BA9F93 /* UserDefaults+Loop.swift in Sources */,
 				43CE7CDE1CA8B63E003CC1B0 /* Data.swift in Sources */,
 				E9BB27AB23B85C3500FB4987 /* SleepStore.swift in Sources */,
@@ -3866,6 +3879,7 @@
 				C1201E2C23ECDBD0002DA84A /* WatchContextRequestUserInfo.swift in Sources */,
 				1D49795824E7289700948F05 /* ServicesViewModel.swift in Sources */,
 				1D4A3E2D2478628500FD601B /* StoredAlert+CoreDataClass.swift in Sources */,
+				DDC389FA2A2B62470066E2E8 /* OriginalDosingStrategy.swift in Sources */,
 				892D7C5123B54A15008A9656 /* CarbEntryViewController.swift in Sources */,
 				B4E202302661063E009421B5 /* AutomaticDosingStatus.swift in Sources */,
 				C191D2A125B3ACAA00C26C0B /* DosingStrategySelectionView.swift in Sources */,
@@ -3897,6 +3911,7 @@
 				1DB619AC270BAD3D006C9D07 /* VersionUpdateViewModel.swift in Sources */,
 				A9C62D882331703100535612 /* Service.swift in Sources */,
 				89CAB36324C8FE96009EE3CE /* PredictedGlucoseChartView.swift in Sources */,
+				DDC389F82A2B620B0066E2E8 /* LinearRampDosingStrategy.swift in Sources */,
 				4F6663941E905FD2009E74FC /* ChartColorPalette+Loop.swift in Sources */,
 				A9F703732489BC8500C98AD8 /* CarbStore+SimulatedCoreData.swift in Sources */,
 				4328E0351CFC0AE100E199AA /* WatchDataManager.swift in Sources */,
@@ -3960,6 +3975,7 @@
 				A97F250825E056D500F0EE19 /* OnboardingManager.swift in Sources */,
 				438D42F91D7C88BC003244B0 /* PredictionInputEffect.swift in Sources */,
 				892A5D692230C41D008961AB /* RangeReplaceableCollection.swift in Sources */,
+				DDC389F62A2B61750066E2E8 /* DosingStrategy.swift in Sources */,
 				4F70C2101DE8FAC5006380B7 /* ExtensionDataManager.swift in Sources */,
 				43DFB62320D4CAE7008A7BAE /* PumpManager.swift in Sources */,
 				A9FB75F1252BE320004C7D3F /* BolusDosingDecision.swift in Sources */,
diff --git a/Loop/Loop/Managers/DosingStrategy.swift b/Loop/Loop/Managers/DosingStrategy.swift
new file mode 100644
index 00000000..3d005b13
--- /dev/null
+++ b/Loop/Loop/Managers/DosingStrategy.swift
@@ -0,0 +1,20 @@
+//
+//  DosingStrategy.swif.swift
+//  Loop
+//
+//  Created by Jonas Björkert on 2023-06-03.
+//  Copyright © 2023 LoopKit Authors. All rights reserved.
+//
+
+import Foundation
+import HealthKit
+import LoopKit
+import LoopCore
+
+protocol DosingStrategy {
+    func calculateDosingFactor(
+        for glucose: HKQuantity,
+        correctionRangeSchedule: GlucoseRangeSchedule,
+        settings: LoopSettings
+    ) -> Double
+}
diff --git a/Loop/Loop/Managers/LinearRampDosingStrategy.swift b/Loop/Loop/Managers/LinearRampDosingStrategy.swift
new file mode 100644
index 00000000..9eb95d48
--- /dev/null
+++ b/Loop/Loop/Managers/LinearRampDosingStrategy.swift
@@ -0,0 +1,36 @@
+//
+//  LinearRampDosingStrategy.swift
+//  Loop
+//
+//  Created by Jonas Björkert on 2023-06-03.
+//  Copyright © 2023 LoopKit Authors. All rights reserved.
+//
+
+import Foundation
+import HealthKit
+import LoopKit
+import LoopCore
+
+struct LinearRampDosingStrategy: DosingStrategy {
+    func calculateDosingFactor(
+        for glucose: HKQuantity,
+        correctionRangeSchedule: GlucoseRangeSchedule,
+        settings: LoopSettings
+    ) -> Double {
+        // Calculate current glucose and lower bound target
+        let currentGlucose = glucose.doubleValue(for: .milligramsPerDeciliter)
+        let correctionRange = correctionRangeSchedule.quantityRange(at: Date())
+        let lowerBoundTarget = correctionRange.lowerBound.doubleValue(for: .milligramsPerDeciliter)
+
+        // Calculate minimum glucose sliding scale and scaling fraction
+        let minGlucoseSlidingScale = LoopConstants.minGlucoseDeltaSlidingScale + lowerBoundTarget
+        let scalingFraction = (LoopConstants.maxPartialApplicationFactor - LoopConstants.minPartialApplicationFactor) / (LoopConstants.maxGlucoseSlidingScale - minGlucoseSlidingScale)
+        let scalingGlucose = max(currentGlucose - minGlucoseSlidingScale, 0.0)
+
+        // Calculate effectiveBolusApplicationFactor
+        let effectiveBolusApplicationFactor = min(LoopConstants.minPartialApplicationFactor + scalingGlucose * scalingFraction, LoopConstants.maxPartialApplicationFactor)
+
+        return effectiveBolusApplicationFactor
+    }
+}
+
diff --git a/Loop/Loop/Managers/LoopDataManager.swift b/Loop/Loop/Managers/LoopDataManager.swift
index ffc66ee3..138c3bec 100644
--- a/Loop/Loop/Managers/LoopDataManager.swift
+++ b/Loop/Loop/Managers/LoopDataManager.swift
@@ -67,6 +67,8 @@ final class LoopDataManager {
 
     private var insulinOnBoard: InsulinValue?
 
+    var dosingStrategy: DosingStrategy = OriginalDosingStrategy() // default to original strategy
+
     deinit {
         for observer in notificationObservers {
             NotificationCenter.default.removeObserver(observer)
@@ -1697,9 +1699,25 @@ extension LoopDataManager {
                 let volumeRounder = { (_ units: Double) in
                     return self.delegate?.roundBolusVolume(units: units) ?? units
                 }
-
-                let maxAutomaticBolus = min(iobHeadroom, maxBolus! * LoopConstants.bolusPartialApplicationFactor)
-
+
+                // Create dosing strategy based on user setting
+                let dosingStrategy: DosingStrategy = UserDefaults.standard.bool(forKey: "applyLinearRampToBolusApplicationFactor")
+                ? LinearRampDosingStrategy()
+                : OriginalDosingStrategy()
+
+                let correctionRangeSchedule = settings.effectiveGlucoseTargetRangeSchedule()
+
+                let effectiveBolusApplicationFactor = dosingStrategy.calculateDosingFactor(
+                    for: glucose.quantity,
+                    correctionRangeSchedule: correctionRangeSchedule!,
+                    settings: settings
+                )
+
+                print(" *** Glucose, effectiveBolusApplicationFactor: ", glucose.quantity, Double(Int(100.0*effectiveBolusApplicationFactor))/100.0)
+
+                // If a user customizes maxPartialApplicationFactor > 1; this respects maxBolus
+                let maxAutomaticBolus = min(iobHeadroom, maxBolus! * min(effectiveBolusApplicationFactor, 1.0))
+
                 dosingRecommendation = predictedGlucose.recommendedAutomaticDose(
                     to: glucoseTargetRange!,
                     at: predictedGlucose[0].startDate,
@@ -1708,7 +1726,7 @@ extension LoopDataManager {
                     model: doseStore.insulinModelProvider.model(for: pumpInsulinType),
                     basalRates: basalRateSchedule!,
                     maxAutomaticBolus: maxAutomaticBolus,
-                    partialApplicationFactor: LoopConstants.bolusPartialApplicationFactor * self.timeBasedDoseApplicationFactor,
+                    partialApplicationFactor: effectiveBolusApplicationFactor * self.timeBasedDoseApplicationFactor,
                     lastTempBasal: lastTempBasal,
                     volumeRounder: volumeRounder,
                     rateRounder: rateRounder,
diff --git a/Loop/Loop/Managers/OriginalDosingStrategy.swift b/Loop/Loop/Managers/OriginalDosingStrategy.swift
new file mode 100644
index 00000000..88cb7232
--- /dev/null
+++ b/Loop/Loop/Managers/OriginalDosingStrategy.swift
@@ -0,0 +1,23 @@
+//
+//  OriginalDosingStrategy.swift
+//  Loop
+//
+//  Created by Jonas Björkert on 2023-06-03.
+//  Copyright © 2023 LoopKit Authors. All rights reserved.
+//
+
+import Foundation
+import HealthKit
+import LoopKit
+import LoopCore
+
+struct OriginalDosingStrategy: DosingStrategy {
+    func calculateDosingFactor(
+        for glucose: HKQuantity,
+        correctionRangeSchedule: GlucoseRangeSchedule,
+        settings: LoopSettings
+    ) -> Double {
+        // The original strategy uses a constant dosing factor.
+        return LoopConstants.bolusPartialApplicationFactor
+    }
+}
diff --git a/Loop/Loop/Models/LoopConstants.swift b/Loop/Loop/Models/LoopConstants.swift
index a62fc138..2dc64f18 100644
--- a/Loop/Loop/Models/LoopConstants.swift
+++ b/Loop/Loop/Models/LoopConstants.swift
@@ -75,4 +75,12 @@ enum LoopConstants {
     static let simpleBolusCalculatorMinGlucoseBolusRecommendation = HKQuantity(unit: .milligramsPerDeciliter, doubleValue: 70)
     static let simpleBolusCalculatorMinGlucoseMealBolusRecommendation = HKQuantity(unit: .milligramsPerDeciliter, doubleValue: 55)
     static let simpleBolusCalculatorGlucoseWarningLimit = HKQuantity(unit: .milligramsPerDeciliter, doubleValue: 70)
+
+    // Dosing Stategy: Automatic Bolus: Sliding Scale
+    static let minPartialApplicationFactor = 0.20 // min fraction of correction when glucose > minGlucoseSlidingScale
+    static let maxPartialApplicationFactor = 0.80 // max fraction of correction when glucose > maxGlucoseSlidingScale
+    // set minGlucoseSlidingScale based on user setting for correction range
+    // use mg/dL for calculations
+    static let minGlucoseDeltaSlidingScale = 10.0 // mg/dL
+    static let maxGlucoseSlidingScale = 200.0 // mg/dL
 }
diff --git a/Loop/Loop/View Models/SettingsViewModel+ApplyLinearRamp.swift b/Loop/Loop/View Models/SettingsViewModel+ApplyLinearRamp.swift
new file mode 100644
index 00000000..b3552068
--- /dev/null
+++ b/Loop/Loop/View Models/SettingsViewModel+ApplyLinearRamp.swift	
@@ -0,0 +1,20 @@
+//
+//  SettingsViewModel+ApplyLinearRamp.swift
+//  Loop
+//
+//  Created by Jonas Björkert on 2023-06-03.
+//  Copyright © 2023 LoopKit Authors. All rights reserved.
+//
+
+import Foundation
+import SwiftUI
+
+extension SettingsViewModel {
+
+    var applyLinearRampToBolusApplicationFactorBinding: Binding<Bool> {
+        Binding<Bool>(
+            get: { UserDefaults.standard.bool(forKey: "applyLinearRampToBolusApplicationFactor") },
+            set: { UserDefaults.standard.set($0, forKey: "applyLinearRampToBolusApplicationFactor") }
+        )
+    }
+}
diff --git a/Loop/Loop/Views/DosingStrategySelectionView.swift b/Loop/Loop/Views/DosingStrategySelectionView.swift
index f447b032..8981f96e 100644
--- a/Loop/Loop/Views/DosingStrategySelectionView.swift
+++ b/Loop/Loop/Views/DosingStrategySelectionView.swift
@@ -14,11 +14,13 @@ import LoopKitUI
 public struct DosingStrategySelectionView: View {
     
     @Binding private var automaticDosingStrategy: AutomaticDosingStrategy
-    
+    @Binding private var applyLinearRampToBolusApplicationFactor: Bool
+
     @State private var internalDosingStrategy: AutomaticDosingStrategy
     
-    public init(automaticDosingStrategy: Binding<AutomaticDosingStrategy>) {
+    public init(automaticDosingStrategy: Binding<AutomaticDosingStrategy>, applyLinearRampToBolusApplicationFactor: Binding<Bool>) {
         self._automaticDosingStrategy = automaticDosingStrategy
+        self._applyLinearRampToBolusApplicationFactor = applyLinearRampToBolusApplicationFactor
         self._internalDosingStrategy = State(initialValue: automaticDosingStrategy.wrappedValue)
     }
     
@@ -45,27 +47,52 @@ public struct DosingStrategySelectionView: View {
                             self.internalDosingStrategy = strategy // Hack to force update. :(
                         }
                     }
-                )
+                ),
+                trailingView: strategy.isAutomaticBolus ? linearRampVolusApplicationFactorSection : nil
             )
             .padding(.vertical, 4)
         }
     }
 }
 
+extension DosingStrategySelectionView {
+    var linearRampVolusApplicationFactorSection: AnyView {
+        return AnyView(
+            Toggle(isOn: $applyLinearRampToBolusApplicationFactor) {
+                VStack(alignment: .leading) {
+                    Text("Modify Bolus Percentage", comment: "The title text for the Modify Bolus Percentage toggle")
+                        .padding(.vertical, 0.5)
+                        .font(.subheadline)
+                    Text("Modify Automatic Bolus behavior: This experimental feature varies the percentage of recommended bolus delivered each cycle with glucose level. Near correction range, use 20% (similar to Temp Basal). Gradually increase to a maximum of 80% at high glucose (200 mg/dL, 11.1 mmol/L).\n\nPlease be aware that during fast rising glucose, such as after an unannounced meal, this feature, combined with Loop's velocity and retrospective correction effects, may result in a larger dose than your ISF would call for.", comment: "Description string for Modify Bolus Percentage toggle")
+                        .font(.footnote)
+                        .foregroundColor(.secondary)
+                        .fixedSize(horizontal: false, vertical: true)
+                        .multilineTextAlignment(.leading)
+                }
+                .fixedSize(horizontal: false, vertical: true)
+            }
+            .disabled(!automaticDosingStrategy.isAutomaticBolus)
+        )
+    }
+}
+
 extension AutomaticDosingStrategy {
     var informationalText: String {
         switch self {
         case .tempBasalOnly:
             return NSLocalizedString("Loop will set temporary basal rates to increase and decrease insulin delivery.", comment: "Description string for temp basal only dosing strategy")
         case .automaticBolus:
-            return NSLocalizedString("Loop will automatically bolus when insulin needs are above scheduled basal, and will use temporary basal rates when needed to reduce insulin delivery below scheduled basal.", comment: "Description string for automatic bolus dosing strategy")
+            return NSLocalizedString("Loop will automatically bolus 40% of recommended bolus when insulin needs are above scheduled basal, and will use temporary basal rates when needed to reduce insulin delivery below scheduled basal.", comment: "Description string for automatic bolus dosing strategy")
         }
     }
 
+    var isAutomaticBolus: Bool {
+        return self == .automaticBolus
+    }
 }
 
 struct DosingStrategySelectionView_Previews: PreviewProvider {
     static var previews: some View {
-        DosingStrategySelectionView(automaticDosingStrategy: .constant(.automaticBolus))
+        DosingStrategySelectionView(automaticDosingStrategy: .constant(.automaticBolus), applyLinearRampToBolusApplicationFactor: .constant(false))
     }
 }
diff --git a/Loop/Loop/Views/SettingsView.swift b/Loop/Loop/Views/SettingsView.swift
index dc3f6ec3..f30ee4d1 100644
--- a/Loop/Loop/Views/SettingsView.swift
+++ b/Loop/Loop/Views/SettingsView.swift
@@ -165,7 +165,7 @@ extension SettingsView {
     private var dosingStrategySection: some View {
         Section(header: SectionHeader(label: NSLocalizedString("Dosing Strategy", comment: "The title of the Dosing Strategy section in settings"))) {
             
-            NavigationLink(destination: DosingStrategySelectionView(automaticDosingStrategy: $viewModel.automaticDosingStrategy))
+            NavigationLink(destination: DosingStrategySelectionView(automaticDosingStrategy: $viewModel.automaticDosingStrategy, applyLinearRampToBolusApplicationFactor: viewModel.applyLinearRampToBolusApplicationFactorBinding))
             {
                 HStack {
                     Text(viewModel.automaticDosingStrategy.title)
Submodule LoopKit contains modified content
diff --git a/LoopKit/LoopKitUI/Views/CheckmarkListItem.swift b/LoopKit/LoopKitUI/Views/CheckmarkListItem.swift
index 2c8b71f..f4aa877 100644
--- a/LoopKit/LoopKitUI/Views/CheckmarkListItem.swift
+++ b/LoopKit/LoopKitUI/Views/CheckmarkListItem.swift
@@ -15,13 +15,15 @@ public struct CheckmarkListItem: View {
     var description: Text
     @Binding var isSelected: Bool
     let isEnabled: Bool
+    var trailingView: AnyView? = nil
 
-    public init(title: Text, titleFont: Font = .headline, description: Text, isSelected: Binding<Bool>, isEnabled: Bool = true) {
+    public init(title: Text, titleFont: Font = .headline, description: Text, isSelected: Binding<Bool>, isEnabled: Bool = true, trailingView: AnyView? = nil) {
         self.title = title
         self.titleFont = titleFont
         self.description = description
         self._isSelected = isSelected
         self.isEnabled = isEnabled
+        self.trailingView = trailingView
     }
 
     @ViewBuilder
@@ -36,23 +38,29 @@ public struct CheckmarkListItem: View {
     }
     
     private var content: some View {
-        HStack(spacing: 0) {
-            VStack(alignment: .leading, spacing: 4) {
-                title
-                    .font(titleFont)
-                description
-                    .font(.footnote)
-                    .foregroundColor(.secondary)
-                    .fixedSize(horizontal: false, vertical: true)
-                    .multilineTextAlignment(.leading)
-            }
+        VStack(alignment: .leading) {
+            HStack(spacing: 0) {
+                VStack(alignment: .leading, spacing: 4) {
+                    title
+                        .font(titleFont)
+                    description
+                        .font(.footnote)
+                        .foregroundColor(.secondary)
+                        .fixedSize(horizontal: false, vertical: true)
+                        .multilineTextAlignment(.leading)
+                }
 
-            Spacer(minLength: 12)
+                Spacer(minLength: 12)
 
-            selectionIndicator
-                .accessibility(label: Text(isSelected ? "Selected" : "Unselected"))
+                selectionIndicator
+                    .accessibility(label: Text(isSelected ? "Selected" : "Unselected"))
+            }
+            .animation(nil)
+            if let trailingView = trailingView {
+                trailingView
+                    .padding(.top, 4)
+            }
         }
-        .animation(nil)
     }
 
     @ViewBuilder
